@page "/charts"
@inject Financial.FinancialService financialService

<div class="row-layout charts-container">
    <div class="column-layout group">
        <IgbCategoryChart DataSource="financialBoxOfficeRevenue" ChartType="CategoryChartType.Column" ChartTitle="Column" ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series" class="category-chart" charts-scope></IgbCategoryChart>
    </div>
    <div class="column-layout group">
        <IgbCategoryChart DataSource="financialBoxOfficeRevenue" ChartType="CategoryChartType.Area" ChartTitle="Area" ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series" class="category-chart" charts-scope></IgbCategoryChart>
    </div>
    <div class="column-layout group">
        <IgbCategoryChart DataSource="financialBoxOfficeRevenue" ChartType="CategoryChartType.Point" ChartTitle="Point" ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series" class="category-chart" charts-scope></IgbCategoryChart>
    </div>
    <div class="column-layout group">
        <IgbCategoryChart DataSource="financialBoxOfficeRevenue" ChartType="CategoryChartType.Line" ChartTitle="Line" ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series" class="category-chart" charts-scope></IgbCategoryChart>
    </div>
    <div class="column-layout group_1">
        <IgbCategoryChart DataSource="financialBoxOfficeRevenue" ChartType="CategoryChartType.Spline" ChartTitle="Spline" ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series" class="category-chart" charts-scope></IgbCategoryChart>
    </div>
    <div class="column-layout group_1">
        <IgbCategoryChart DataSource="financialBoxOfficeRevenue" ChartType="CategoryChartType.SplineArea" ChartTitle="Spline area" ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series" class="category-chart" charts-scope></IgbCategoryChart>
    </div>
    <div class="column-layout group_1">
        <IgbCategoryChart DataSource="financialBoxOfficeRevenue" ChartType="CategoryChartType.StepArea" ChartTitle="Step area" ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series" class="category-chart" charts-scope></IgbCategoryChart>
    </div>
    <div class="column-layout group_1">
        <IgbCategoryChart DataSource="financialBoxOfficeRevenue" ChartType="CategoryChartType.StepLine" ChartTitle="Step line" ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series" class="category-chart" charts-scope></IgbCategoryChart>
    </div>
    <div class="column-layout group_1">
        <IgbCategoryChart DataSource="financialTrading" ChartType="CategoryChartType.Waterfall" ChartTitle="Waterfall" IncludedProperties="@(new[] { "Category", "OpenPrice" })" ComputedPlotAreaMarginMode="ComputedPlotAreaMarginMode.Series" class="category-chart" charts-scope></IgbCategoryChart>
    </div>
    <div class="column-layout group_1">
        <h6 class="h6">
            Pie chart with start angle 270deg
        </h6>
        <IgbPieChart DataSource="financialGlobalElectricityDemand" LabelsPosition="LabelsPosition.BestFit" StartAngle="270" LabelMemberPath="Label" ValueMemberPath="Value" class="pie-chart" charts-scope></IgbPieChart>
    </div>
    <div class="column-layout group_1">
        <h6 class="h6">
            Pie chart with label outside + others 20%
        </h6>
        <IgbPieChart DataSource="financialGlobalElectricityDemand" LabelsPosition="LabelsPosition.OutsideEnd" OthersCategoryThreshold="20" LabelMemberPath="Label" ValueMemberPath="Value" class="pie-chart" charts-scope></IgbPieChart>
    </div>
</div>

@code {
    private Financial.BoxOfficeRevenueType[] financialBoxOfficeRevenue = Array.Empty<Financial.BoxOfficeRevenueType>();
    private Financial.TradingType[] financialTrading = Array.Empty<Financial.TradingType>();
    private Financial.GlobalElectricityDemandType[] financialGlobalElectricityDemand = Array.Empty<Financial.GlobalElectricityDemandType>();

    protected override async Task OnInitializedAsync()
    {
        financialBoxOfficeRevenue = await this.financialService.GetBoxOfficeRevenue() ?? financialBoxOfficeRevenue;
        financialTrading = await this.financialService.GetTrading() ?? financialTrading;
        financialGlobalElectricityDemand = await this.financialService.GetGlobalElectricityDemand() ?? financialGlobalElectricityDemand;
    }
}
